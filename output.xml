<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 5.0.1 (Python 3.10.5 on win32)" generated="20220806 09:47:08.905" rpa="false" schemaversion="3">
<suite id="s1" name="DBTesting" source="C:\Users\irfandy4hmad\PycharmProjects\robotFrameworkPython\TestCases\DBTesting.robot">
<kw name="Connect To Database" library="DatabaseLibrary" type="SETUP">
<arg>pymysql</arg>
<arg>${DBName}</arg>
<arg>${DBUser}</arg>
<arg>${DBPass}</arg>
<arg>${DBHost}</arg>
<arg>${DBPort}</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<msg timestamp="20220806 09:47:09.040" level="INFO">Connecting using : pymysql.connect(db=mydb, user=root, passwd=root, host=127.0.0.1, port=3306, charset=None) </msg>
<status status="PASS" starttime="20220806 09:47:08.966" endtime="20220806 09:47:09.045"/>
</kw>
<test id="s1-t1" name="Check David Record Present in Person Table" line="30">
<kw name="Check If Exists In Database" library="DatabaseLibrary">
<arg>select id from mydb.person where first_name = "David";</arg>
<doc>Check if any row would be returned by given the input `selectStatement`. If there are no results, then this will
throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction
commit or rollback.</doc>
<msg timestamp="20220806 09:47:09.047" level="INFO">Executing : Check If Exists In Database  |  select id from mydb.person where first_name = "David"; </msg>
<msg timestamp="20220806 09:47:09.047" level="INFO">Executing : Query  |  select id from mydb.person where first_name = "David"; </msg>
<status status="PASS" starttime="20220806 09:47:09.047" endtime="20220806 09:47:09.048"/>
</kw>
<status status="PASS" starttime="20220806 09:47:09.046" endtime="20220806 09:47:09.048"/>
</test>
<test id="s1-t2" name="Check Jio Record Present in Person Table" line="33">
<kw name="Check If Not Exists In Database" library="DatabaseLibrary">
<arg>select id from mydb.person where first_name = "Jio";</arg>
<doc>This is the negation of `check_if_exists_in_database`.</doc>
<msg timestamp="20220806 09:47:09.050" level="INFO">Executing : Check If Not Exists In Database  |  select id from mydb.person where first_name = "Jio"; </msg>
<msg timestamp="20220806 09:47:09.050" level="INFO">Executing : Query  |  select id from mydb.person where first_name = "Jio"; </msg>
<msg timestamp="20220806 09:47:09.051" level="FAIL">Expected to have have no rows from 'select id from mydb.person where first_name = "Jio";' but got some rows : ((104,),).</msg>
<status status="FAIL" starttime="20220806 09:47:09.050" endtime="20220806 09:47:09.053"/>
</kw>
<status status="FAIL" starttime="20220806 09:47:09.049" endtime="20220806 09:47:09.054">Expected to have have no rows from 'select id from mydb.person where first_name = "Jio";' but got some rows : ((104,),).</status>
</test>
<test id="s1-t3" name="Check Person Table Exists in mydb Database" line="36">
<kw name="Table Must Exist" library="DatabaseLibrary">
<arg>person</arg>
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<msg timestamp="20220806 09:47:09.056" level="INFO">Executing : Table Must Exist  |  person </msg>
<msg timestamp="20220806 09:47:09.056" level="INFO">Executing : Row Count  |  SELECT * FROM information_schema.tables WHERE table_name='person' </msg>
<status status="PASS" starttime="20220806 09:47:09.056" endtime="20220806 09:47:09.058"/>
</kw>
<status status="PASS" starttime="20220806 09:47:09.055" endtime="20220806 09:47:09.059"/>
</test>
<test id="s1-t4" name="Verify Row Count is Zero" line="39">
<kw name="Row Count Is 0" library="DatabaseLibrary">
<arg>select * from person where first_name = 'XYZ';</arg>
<doc>Check if any rows are returned from the submitted `selectStatement`. If there are, then this will throw an
AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction commit or
rollback.</doc>
<msg timestamp="20220806 09:47:09.061" level="INFO">Executing : Row Count Is 0  |  select * from person where first_name = 'XYZ'; </msg>
<msg timestamp="20220806 09:47:09.061" level="INFO">Executing : Row Count  |  select * from person where first_name = 'XYZ'; </msg>
<status status="PASS" starttime="20220806 09:47:09.060" endtime="20220806 09:47:09.062"/>
</kw>
<status status="PASS" starttime="20220806 09:47:09.060" endtime="20220806 09:47:09.062"/>
</test>
<test id="s1-t5" name="Verify Row Count is Equal to Some Value" line="42">
<kw name="Row Count Is Equal To X" library="DatabaseLibrary">
<arg>select * from person where first_name = 'David';</arg>
<arg>1</arg>
<doc>Check if the number of rows returned from `selectStatement` is equal to the value submitted. If not, then this
will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<msg timestamp="20220806 09:47:09.064" level="INFO">Executing : Row Count Is Equal To X  |  select * from person where first_name = 'David';  |  1 </msg>
<msg timestamp="20220806 09:47:09.064" level="INFO">Executing : Row Count  |  select * from person where first_name = 'David'; </msg>
<status status="PASS" starttime="20220806 09:47:09.064" endtime="20220806 09:47:09.065"/>
</kw>
<status status="PASS" starttime="20220806 09:47:09.063" endtime="20220806 09:47:09.065"/>
</test>
<test id="s1-t6" name="Verify Row Count is Greater than Some Value" line="45">
<kw name="Row Count Is Greater Than X" library="DatabaseLibrary">
<arg>select * from person where first_name = 'David';</arg>
<arg>0</arg>
<doc>Check if the number of rows returned from `selectStatement` is greater than the value submitted. If not, then
this will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<msg timestamp="20220806 09:47:09.067" level="INFO">Executing : Row Count Is Greater Than X  |  select * from person where first_name = 'David';  |  0 </msg>
<msg timestamp="20220806 09:47:09.067" level="INFO">Executing : Row Count  |  select * from person where first_name = 'David'; </msg>
<status status="PASS" starttime="20220806 09:47:09.067" endtime="20220806 09:47:09.069"/>
</kw>
<status status="PASS" starttime="20220806 09:47:09.066" endtime="20220806 09:47:09.070"/>
</test>
<test id="s1-t7" name="Verify Row Count is Less than Some Value" line="48">
<kw name="Row Count Is Less Than X" library="DatabaseLibrary">
<arg>select * from person where first_name = 'David';</arg>
<arg>5</arg>
<doc>Check if the number of rows returned from `selectStatement` is less than the value submitted. If not, then this
will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<msg timestamp="20220806 09:47:09.073" level="INFO">Executing : Row Count Is Less Than X  |  select * from person where first_name = 'David';  |  5 </msg>
<msg timestamp="20220806 09:47:09.073" level="INFO">Executing : Row Count  |  select * from person where first_name = 'David'; </msg>
<status status="PASS" starttime="20220806 09:47:09.072" endtime="20220806 09:47:09.074"/>
</kw>
<status status="PASS" starttime="20220806 09:47:09.072" endtime="20220806 09:47:09.074"/>
</test>
<test id="s1-t8" name="Retrieve Records from Person Table" line="56">
<kw name="Query" library="DatabaseLibrary">
<var>@{queryResults}</var>
<arg>select * from mydb.person;</arg>
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<msg timestamp="20220806 09:47:09.076" level="INFO">Executing : Query  |  select * from mydb.person; </msg>
<msg timestamp="20220806 09:47:09.078" level="INFO">@{queryResults} = [ (101, 'John', 'Canady') | (102, 'David', 'Canady') | (103, 'Smith', 'Canady') | (104, 'Jio', 'Canady') | (105, 'Tye', 'Canady') ]</msg>
<status status="PASS" starttime="20220806 09:47:09.076" endtime="20220806 09:47:09.078"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>many @{queryResults}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220806 09:47:09.079" endtime="20220806 09:47:09.080"/>
</kw>
<status status="PASS" starttime="20220806 09:47:09.075" endtime="20220806 09:47:09.080"/>
</test>
<test id="s1-t9" name="Delete Records from Person Table" line="60">
<kw name="Execute Sql String" library="DatabaseLibrary">
<var>${output}</var>
<arg>delete from mydb.person;</arg>
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<msg timestamp="20220806 09:47:09.083" level="INFO">Executing : Execute SQL String  |  delete from mydb.person; </msg>
<msg timestamp="20220806 09:47:09.087" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20220806 09:47:09.082" endtime="20220806 09:47:09.088"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${output}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220806 09:47:09.088" endtime="20220806 09:47:09.089"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${output}</arg>
<arg>None</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220806 09:47:09.090" level="INFO">Argument types are:
&lt;class 'NoneType'&gt;
&lt;class 'str'&gt;</msg>
<status status="PASS" starttime="20220806 09:47:09.089" endtime="20220806 09:47:09.090"/>
</kw>
<status status="PASS" starttime="20220806 09:47:09.082" endtime="20220806 09:47:09.090"/>
</test>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="TEARDOWN">
<doc>Disconnects from the database.</doc>
<msg timestamp="20220806 09:47:09.092" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20220806 09:47:09.092" endtime="20220806 09:47:09.092"/>
</kw>
<status status="FAIL" starttime="20220806 09:47:08.908" endtime="20220806 09:47:09.092"/>
</suite>
<statistics>
<total>
<stat pass="8" fail="1" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="8" fail="1" skip="0" id="s1" name="DBTesting">DBTesting</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
